#There should be three 0s for criterion 1 in phase 2 for the three birds pulled early on (see above) - condition is met
table(dat$ID, dat$Criterion, dat$Phase)
#Let's safety check our criterion assignment, by comparing it to cumulative counts
#First, we apply the sliding scale counts
dat$sum_count <- NA
for(i in 1:nrow(dat)){
if(dat$Trial[i] == 17 | dat$Trial[i] == 18 | dat$Trial[i] == 19){
dat$sum_count[i] <- sum(dat$Correct[(i - (dat$Trial[i - 1])): i])
} else if(dat$Trial[i] >= 20){
dat$sum_count[i] <- sum(sum(dat$Correct[(i - 19):i]))
} else if(dat$Trial[i] < 17){
dat$sum_count[i] <- 0
}
}
for(i in 1:nrow(dat)){
if(dat$Criterion[i] == 1 & dat$Correct[i] != 1 & dat$sum_count[i] != 17){
print(i)
}
} #No printed error rows returned - Criterion assignment safety checked!
#We want to begin estimation of phi and lambda in reversal learning based on attractions that encompass ALL previous choices, irrespective of whether they're extra or not
#So we need to add a drop column to exclude extra learning trials in reversal learning but not initial learning
#Because we run a separate EWA model for initial and reversal learning, neither model include the extra learning trials (see STAN_Execution.R script)
#Rather, reversal estimations will precisely capture attraction scores at stimulus-reward swapping
dat$drop <- NA
for(i in 1:nrow(dat)){
if(dat$Phase[i] == 2 & dat$Criterion[i] == 2){
dat$drop[i] <- 1
} else {
dat$drop[i] <- 0
}
}
#As an aside regarding extra initial learning trials, these are already an inherent feature of core- and middle-population birds, because of the fixed-window method applied by the experimenter(s), detailed above.
#And if we apply the sliding-window method originally used by experimenters to the edge-population data, we find that these birds also gained extra learning trials due to experimenter oversight
#SW_Criterion of 0 = not passed; 1 = passing trial; 2 = extra learning trials, either in initial or reversal
dat$SW_Criterion <- NA
for(i in 1:nrow(dat)){
dat$SW_Criterion[i] <- 0 #Baseline for all rows
#Trial meet SW_Criterion
if(dat$Trial[i] >= 20){ #Any trial equal to or above 20
if(sum(dat$Correct[(i - 19):i]) >= 17){
if((sum(dat$Correct[(i - 19):(i - 10)]) >= 8) & (sum(dat$Correct[(i - 9):i]) >= 8)){
dat$SW_Criterion[i] <- 1
}
}
}
#Extra trials beyond SW_Criterion
#Currently, the sheet will have multiple birds with multiple trials where SW_Criterion was met - need to only have first case
#Can have a pass, followed by a no-pass, and then later on more passes - detect this
if(dat$Trial[i] >= 18){ #If trial 18 or bigger
if(dat$SW_Criterion[i - 1] == 1){ #If bird passed in previous trial, indicated by summing b/c 0 + 1 = 1
dat$SW_Criterion[i] <- 2 #Assign 2
}
}
#Now because first-pass trial will always be followed by a 2, it is possible to detect all cases post-initial pass, and assign 2
if(dat$Trial[i] >= 18){ #If trial 18 or bigger
if(sum(dat$SW_Criterion[(i-1):i]) >= 2){ #If bird already passed, indicated by summing b/c 1 + 2 = 3 (where 2 can be assigned from condition above or from previous loop through current statement)
dat$SW_Criterion[i] <- 2 #Assign 2
}
}
}
edge_oversight <- dat %>% filter(Population == 1) #Only edge pop birds
edge_oversight <- dat %>% filter(Population == 3) #Only edge pop birds
table(edge_oversight$ID, edge_oversight$SW_Criterion, edge_oversight$Phase) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
#For our supplementary Poisson, we need choice-option switch counts
dat$switch <- NA
for(i in 1:nrow(dat)){
if(dat$Trial[i] > 1){
if(dat$Choice[i] == 1){
if(dat$Choice[i - 1] == 1){
dat$switch[i] <- 0
} else {
dat$switch[i] <- 1
}
} else {
if(dat$Choice[i - 1] == 2){
dat$switch[i] <- 0
} else {
dat$switch[i] <- 1
}
}
} else {
dat$switch[i] <- 0
}
}
edge_oversight <- dat %>% filter(Population == 1) #Only edge pop birds
table(edge_oversight$ID, edge_oversight$SW_Criterion, edge_oversight$Phase) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
#Sliding-window Criterion
dat$SW_Criterion <- NA #0 = not passed; 1 = passing trial; 2 = extra learning trials, either in initial or reversal
for(i in 1:nrow(dat)){
#Baseline for all rows
dat$SW_Criterion[i] <- 0
#Trial meet SW_Criterion
if(dat$Trial[i] >= 20){ #Any trial equal to or above 20
if(sum(dat$Correct[(i - 19):i]) >= 17){
if((sum(dat$Correct[(i - 19):(i - 10)]) >= 8) & (sum(dat$Correct[(i - 9):i]) >= 8)){
dat$SW_Criterion[i] <- 1
}
}
}
#Extra trials beyond SW_Criterion
#Currently, the sheet will have multiple birds with multiple trials where SW_Criterion was met - need to only have first case
#Can have a pass, followed by a no-pass, and then later on more passes - detect this
if(dat$Trial[i] >= 20){ #If trial 18 or bigger
if(dat$SW_Criterion[i - 1] == 1){ #If bird passed in previous trial, indicated by summing b/c 0 + 1 = 1
dat$SW_Criterion[i] <- 2 #Assign 2
}
}
#Now because first-pass trial will always be followed by a 2, it is possible to detect all cases post-initial pass, and assign 2
if(dat$Trial[i] >= 20){ #If trial 18 or bigger
if(sum(dat$SW_Criterion[(i-1):i]) >= 2){ #If bird already passed, indicated by summing b/c 1 + 2 = 3 (where 2 can be assigned from condition above or from previous loop through current statement)
dat$SW_Criterion[i] <- 2 #Assign 2
}
}
}
edge_oversight <- dat %>% filter(Population == 1) #Only edge pop birds
table(edge_oversight$ID, edge_oversight$SW_Criterion, edge_oversight$Phase) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
edge_oversight <- dat %>% filter(Population == 1) #Only edge pop birds
table(edge_oversight$ID, edge_oversight$SW_Criterion, edge_oversight$Phase) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
#Fixed-window Criterion
dat$FW_Criterion <- NA #0 = not passed; 1 = passing trial; 2 = extra learning trials, either in initial or reversal
for(i in 1:nrow(dat)){
dat$FW_Criterion[i] <- 0
#Trial meet FW_Criterion
if(dat$Trial[i] >= 20 & dat$Trial[i]%%10 == 0){
print(dat$Trial[i])
}
}
#Fixed-window Criterion
dat$FW_Criterion <- NA #0 = not passed; 1 = passing trial; 2 = extra learning trials, either in initial or reversal
for(i in 1:nrow(dat)){
dat$FW_Criterion[i] <- 0
#Trial meet FW_Criterion
if(dat$Trial[i] >= 20 & dat$Trial[i]%%10 == 0){
if(sum(dat$Correct[(i - 19):i]) >= 17){
if((sum(dat$Correct[(i - 19):(i - 10)]) >= 8) & (sum(dat$Correct[(i - 9):i]) >= 8)){
dat$FW_Criterion[i] <- 1
}
}
}
if(dat$FW_Criterion[i] == 1) break
}
View(dat)
#Fixed-window Criterion
dat$FW_Criterion <- NA #0 = not passed; 1 = passing trial; 2 = extra learning trials, either in initial or reversal
for(i in 1:nrow(dat)){
dat$FW_Criterion[i] <- 0
#Trial meet FW_Criterion
if(dat$Trial[i] >= 20 & dat$Trial[i]%%10 == 0){
if(sum(dat$Correct[(i - 19):i]) >= 17){
if((sum(dat$Correct[(i - 19):(i - 10)]) >= 8) & (sum(dat$Correct[(i - 9):i]) >= 8)){
dat$FW_Criterion[i] <- 1
}
}
}
#Extra trials beyond FW_Criterion
#Currently, the sheet will have multiple birds with multiple trials where SW_Criterion was met - need to only have first case
#Can have a pass, followed by a no-pass, and then later on more passes - detect this
if(dat$Trial[i] >= 21){ #If trial 18 or bigger
if(dat$FW_Criterion[i - 1] == 1){ #If bird passed in previous trial, indicated by summing b/c 0 + 1 = 1
dat$FW_Criterion[i] <- 2 #Assign 2
dat$FW_Criterion[i + 1] <- 2)
}
}
}
for(i in 1:nrow(dat)){
dat$FW_Criterion[i] <- 0
#Trial meet FW_Criterion
if(dat$Trial[i] >= 20 & dat$Trial[i]%%10 == 0){
if(sum(dat$Correct[(i - 19):i]) >= 17){
if((sum(dat$Correct[(i - 19):(i - 10)]) >= 8) & (sum(dat$Correct[(i - 9):i]) >= 8)){
dat$FW_Criterion[i] <- 1
}
}
}
#Extra trials beyond FW_Criterion
#Currently, the sheet will have multiple birds with multiple trials where SW_Criterion was met - need to only have first case
#Can have a pass, followed by a no-pass, and then later on more passes - detect this
if(dat$Trial[i] >= 21){ #If trial 18 or bigger
if(dat$FW_Criterion[i - 1] == 1){ #If bird passed in previous trial, indicated by summing b/c 0 + 1 = 1
dat$FW_Criterion[i] <- 2 #Assign 2
dat$FW_Criterion[i + 1] <- 2
}
}
}
View(dat)
core_middle_oversight <- dat %>% filter(Population != 3) #Only edge pop birds
table(core_middle_oversight$ID, core_middle_oversight$SW_Criterion, core_middle_oversight$Phase) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
library(tidyverse)
core_middle_oversight <- dat %>% filter(Population != 3) #Only edge pop birds
table(core_middle_oversight$ID, core_middle_oversight$SW_Criterion, core_middle_oversight$Phase) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
core_oversight <- dat %>% filter(Population == 1) #Only edge pop birds
table(core_oversight$ID, core_oversight$SW_Criterion, core_oversight$Phase) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
View(dat)
core_oversight <- dat %>% filter(Population == 1) #Only edge pop birds
table(core_oversight$ID, core_oversight$FW_Criterion, core_oversight$Phase) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
middle_oversight <- dat %>% filter(Population == 2) #Only edge pop birds
table(middle_oversight$ID, middle_oversight$FW_Criterion, middle_oversight$Phase) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
#Fixed-window Criterion
dat$FW_Criterion <- NA #0 = not passed; 1 = passing trial; 2 = extra learning trials, either in initial or reversal
for(i in 1:nrow(dat)){
dat$FW_Criterion[i] <- 0
#Trial meet FW_Criterion
if(dat$Trial[i] >= 20){
if(sum(dat$Correct[(i - 19):i]) >= 17){
if(sum(dat$Correct[(i-19):(i-10)]) >= 8 & sum(dt$Correct[(i-9):i]) >= 8){
dat$FW_Criterion[i] <- 1
}
}
}
#Extra trials beyond FW_Criterion
#Currently, the sheet will have multiple birds with multiple trials where SW_Criterion was met - need to only have first case
#Can have a pass, followed by a no-pass, and then later on more passes - detect this
if(dat$Trial[i] >= 21){ #If trial 18 or bigger
if(dat$FW_Criterion[i - 1] == 1){ #If bird passed in previous trial, indicated by summing b/c 0 + 1 = 1
dat$FW_Criterion[i] <- 2 #Assign 2
dat$FW_Criterion[i + 1] <- 2
}
}
}
#Fixed-window Criterion
dat$FW_Criterion <- NA #0 = not passed; 1 = passing trial; 2 = extra learning trials, either in initial or reversal
for(i in 1:nrow(dat)){
dat$FW_Criterion[i] <- 0
#Trial meet FW_Criterion
if(dat$Trial[i] >= 20){
if(sum(dat$Correct[(i - 19):i]) >= 17){
if(sum(dat$Correct[(i-19):(i-10)]) >= 8 & sum(dat$Correct[(i-9):i]) >= 8){
dat$FW_Criterion[i] <- 1
}
}
}
#Extra trials beyond FW_Criterion
#Currently, the sheet will have multiple birds with multiple trials where SW_Criterion was met - need to only have first case
#Can have a pass, followed by a no-pass, and then later on more passes - detect this
if(dat$Trial[i] >= 21){ #If trial 18 or bigger
if(dat$FW_Criterion[i - 1] == 1){ #If bird passed in previous trial, indicated by summing b/c 0 + 1 = 1
dat$FW_Criterion[i] <- 2 #Assign 2
dat$FW_Criterion[i + 1] <- 2
}
}
}
core_oversight <- dat %>% filter(Population == 1) #Only edge pop birds
table(core_oversight$ID, core_oversight$FW_Criterion, core_oversight$Phase) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
#Fixed-window Criterion
dat$FW_Criterion <- NA #0 = not passed; 1 = passing trial; 2 = extra learning trials, either in initial or reversal
for(i in 1:nrow(dat)){
dat$FW_Criterion[i] <- 0
#Trial meet FW_Criterion
if(dat$Trial[i] >= 20 & dat$Trial[i]%%10 == 0){
if(sum(dat$Correct[(i - 19):i]) >= 17){
if((sum(dat$Correct[(i - 19):(i - 10)]) >= 8) & (sum(dat$Correct[(i - 9):i]) >= 8)){
if(sum(dat$Choice[(i - 19):(i - 3)]) == 17){
dat$FW_Criterion[i - 3] <- 1
} else if(sum(dat$Choice[(i - 19):(i - 2)]) == 17){
dat$FW_Criterion[i - 2] <- 1
} else if(sum(dat$Choice[(i - 19):(i - 1)]) == 17){
dat$FW_Criterion[i - 1] <- 1
} else if(sum(dat$Choice[(i - 19):i]) == 17){
dat$FW_Criterion[i] <- 1
}
}
}
}
}
View(dat)
core_oversight <- dat %>% filter(Population == 1) #Only edge pop birds
table(core_oversight$ID, core_oversight$FW_Criterion, core_oversight$Phase) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
#Fixed-window Criterion
dat$FW_Criterion <- NA #0 = not passed; 1 = passing trial; 2 = extra learning trials, either in initial or reversal
for(i in 1:nrow(dat)){
dat$FW_Criterion[i] <- 0
#Trial meet FW_Criterion
if(dat$Trial[i] >= 20 & dat$Trial[i]%%10 == 0){
if(sum(dat$Correct[(i - 19):i]) >= 17){
if((sum(dat$Correct[(i - 19):(i - 10)]) >= 8) & (sum(dat$Correct[(i - 9):i]) >= 8)){
if(sum(dat$Choice[(i - 19):(i - 3)]) == 17){
dat$FW_Criterion[i] <- 1
} else if(sum(dat$Choice[(i - 19):(i - 2)]) == 17){
dat$FW_Criterion[i - 2] <- 1
} else if(sum(dat$Choice[(i - 19):(i - 1)]) == 17){
dat$FW_Criterion[i - 1] <- 1
} else if(sum(dat$Choice[(i - 19):i]) == 17){
dat$FW_Criterion[i] <- 1
}
}
}
}
}
View(dat)
core_oversight <- dat %>% filter(Population == 1) #Only edge pop birds
table(core_oversight$ID, core_oversight$FW_Criterion, core_oversight$Phase) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
#Fixed-window Criterion
dat$FW_Criterion <- NA #0 = not passed; 1 = passing trial; 2 = extra learning trials, either in initial or reversal
for(i in 1:nrow(dat)){
dat$FW_Criterion[i] <- 0
#Trial meet FW_Criterion
if(dat$Trial[i] >= 20 & dat$Trial[i]%%10 == 0){
if(sum(dat$Correct[(i - 19):i]) >= 17){
if((sum(dat$Correct[(i - 19):(i - 10)]) >= 8) & (sum(dat$Correct[(i - 9):i]) >= 8)){
if(sum(dat$Correct[(i - 19):(i - 3)]) == 17){
dat$FW_Criterion[i] <- 1
} else if(sum(dat$Correct[(i - 19):(i - 2)]) == 17){
dat$FW_Criterion[i - 2] <- 1
} else if(sum(dat$Correct[(i - 19):(i - 1)]) == 17){
dat$FW_Criterion[i - 1] <- 1
} else if(sum(dat$Correct[(i - 19):i]) == 17){
dat$FW_Criterion[i] <- 1
}
}
}
}
}
core_oversight <- dat %>% filter(Population == 1) #Only edge pop birds
table(core_oversight$ID, core_oversight$FW_Criterion, core_oversight$Phase) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
#Fixed-window Criterion
dat$FW_Criterion <- NA #0 = not passed; 1 = passing trial; 2 = extra learning trials, either in initial or reversal
for(i in 1:nrow(dat)){
dat$FW_Criterion[i] <- 0
#Trial meet FW_Criterion
if(dat$Trial[i] >= 20 & dat$Trial[i]%%10 == 0){
if(sum(dat$Correct[(i - 19):i]) >= 17){
if((sum(dat$Correct[(i - 19):(i - 10)]) >= 8) & (sum(dat$Correct[(i - 9):i]) >= 8)){
if(sum(dat$Correct[(i - 19):(i - 3)]) == 17){
dat$FW_Criterion[i - 3] <- 1
} else if(sum(dat$Correct[(i - 19):(i - 2)]) == 17){
dat$FW_Criterion[i - 2] <- 1
} else if(sum(dat$Correct[(i - 19):(i - 1)]) == 17){
dat$FW_Criterion[i - 1] <- 1
} else if(sum(dat$Correct[(i - 19):i]) == 17){
dat$FW_Criterion[i] <- 1
}
}
}
}
}
core_oversight <- dat %>% filter(Population == 1) #Only edge pop birds
table(core_oversight$ID, core_oversight$FW_Criterion, core_oversight$Phase) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
dat$FW_Criterion <- NA
for(i in 1:nrow(dat)){
if(dat$Trial[i] >= 20 & dat$Trial[i]%%10 == 0){
if(sum(dat$Correct[(i - 19):i]) >= 17){
if((sum(dat$Correct[(i - 19):(i - 10)]) >= 8) & (sum(dat$Correct[(i - 9):i]) >= 8)){
dat$FW_Criterion[i] <- 1
}
}
}
if(dat$FW_Criterion[i] == 1) break
}
dat$FW_Criterion <- NA
for(i in 1:nrow(dat)){
if(dat$Trial[i] >= 20 & dat$Trial[i]%%10 == 0){
if(sum(dat$Correct[(i - 19):i]) >= 17){
if((sum(dat$Correct[(i - 19):(i - 10)]) >= 8) & (sum(dat$Correct[(i - 9):i]) >= 8)){
dat$FW_Criterion[i] <- 1
break
}
}
}
}
View(dat)
table(core_oversight$ID, core_oversight$FW_Criterion, core_oversight$Phase) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
dat$Actual_pass <- NA
for(i in 1:nrow(dat)){
if(dat$FW_Criterion[i] == 1){
if(sum(dat$Correct[(i - 19):i]) == 17){
dat$Actual_pass[i] <- 0
} else if(sum(dat$Correct[(i - 19):(i - 3)]) == 17){
dat$Actual_pass[i] <- 3
} else if(sum(dat$Correct[(i - 19):(i - 2)]) == 17){
dat$Actual_pass[i] <- 2
} else if(sum(dat$Correct[(i - 19):(i - 1)]) == 17){
dat$Actual_pass[i] <- 1
}
}
}
dat$FW_Criterion <- NA
for(i in 1:nrow(dat)){
dat$FW_Criterion[i] <-0
if(dat$Trial[i] >= 20 & dat$Trial[i]%%10 == 0){
if(sum(dat$Correct[(i - 19):i]) >= 17){
if((sum(dat$Correct[(i - 19):(i - 10)]) >= 8) & (sum(dat$Correct[(i - 9):i]) >= 8)){
dat$FW_Criterion[i] <- 1
break
}
}
}
}
dat$Actual_pass <- NA
for(i in 1:nrow(dat)){
if(dat$FW_Criterion[i] == 1){
if(sum(dat$Correct[(i - 19):i]) == 17){
dat$Actual_pass[i] <- 0
} else if(sum(dat$Correct[(i - 19):(i - 3)]) == 17){
dat$Actual_pass[i] <- 3
} else if(sum(dat$Correct[(i - 19):(i - 2)]) == 17){
dat$Actual_pass[i] <- 2
} else if(sum(dat$Correct[(i - 19):(i - 1)]) == 17){
dat$Actual_pass[i] <- 1
}
}
}
View(dat)
dat$FW_Criterion <- NA
for(i in 1:nrow(dat)){
dat$FW_Criterion[i] <- 0
if(dat$Trial[i] >= 20 & dat$Trial[i]%%10 == 0){
if(sum(dat$Correct[(i - 19):i]) >= 17){
if((sum(dat$Correct[(i - 19):(i - 10)]) >= 8) & (sum(dat$Correct[(i - 9):i]) >= 8)){
dat$FW_Criterion[i] <- 1
break
}
}
}
}
View(dat)
core_oversight <- dat %>% filter(Population == 1) drop_na() #Only edge pop birds
core_oversight <- dat %>% filter(Population == 1) %>% drop_na() #Only edge pop birds
View(core_oversight)
dat$FW_Criterion <- NA
for(i in 1:nrow(dat)){
dat$FW_Criterion[i] <- 0
if(dat$Trial[i] >= 20 & dat$Trial[i]%%10 == 0){
if(sum(dat$Correct[(i - 19):i]) >= 17){
if((sum(dat$Correct[(i - 19):(i - 10)]) >= 8) & (sum(dat$Correct[(i - 9):i]) >= 8)){
dat$FW_Criterion[i] <- 1
}
}
}
}
dat$Actual_pass <- NA
for(i in 1:nrow(dat)){
if(dat$FW_Criterion[i] == 1){
if(sum(dat$Correct[(i - 19):i]) == 17){
dat$Actual_pass[i] <- 0
} else if(sum(dat$Correct[(i - 19):(i - 3)]) == 17){
dat$Actual_pass[i] <- 3
} else if(sum(dat$Correct[(i - 19):(i - 2)]) == 17){
dat$Actual_pass[i] <- 2
} else if(sum(dat$Correct[(i - 19):(i - 1)]) == 17){
dat$Actual_pass[i] <- 1
}
}
}
core_oversight <- dat %>% filter(Population == 1) %>% drop_na() #Only edge pop birds
View(core_oversight)
dat$Actual_pass_diff <- NA
for(i in 1:nrow(dat)){
if(dat$FW_Criterion[i] == 1){
if(sum(dat$Correct[(i - 19):i]) == 17){
dat$Actual_pass_diff[i] <- 0 #No extra learning trials
} else if(sum(dat$Correct[(i - 19):(i - 3)]) == 17){
dat$Actual_pass_diff[i] <- 3 #Gained 3 extra learning trials
} else if(sum(dat$Correct[(i - 19):(i - 2)]) == 17){
dat$Actual_pass_diff[i] <- 2 #Gained 2 extra learning trials
} else if(sum(dat$Correct[(i - 19):(i - 1)]) == 17){
dat$Actual_pass_diff[i] <- 1 #Gained 1 extra learning trial
}
}
}
core_oversight <- dat %>% filter(Population == 1) %>% drop_na() #Only edge pop birds
table(core_oversight$ID, core_oversight$FW_Criterion, core_oversight$Actual_pass_diff) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
dat$Actual_pass_diff <- NA
for(i in 1:nrow(dat)){
if(dat$FW_Criterion[i] == 1){
if(sum(dat$Correct[(i - 19):i]) == 17){
dat$Actual_pass_diff[i] <- 0 #No extra learning trials
} else if(sum(dat$Correct[(i - 19):(i - 3)]) == 17){
dat$Actual_pass_diff[i] <- 3 #Gained 3 extra learning trials
} else if(sum(dat$Correct[(i - 19):(i - 2)]) == 17){
dat$Actual_pass_diff[i] <- 2 #Gained 2 extra learning trials
} else if(sum(dat$Correct[(i - 19):(i - 1)]) == 17){
dat$Actual_pass_diff[i] <- 1 #Gained 1 extra learning trial
}
}
}
core_oversight <- dat %>% filter(Population == 1) %>% drop_na() #Only edge pop birds
core_oversight <- dat %>% filter(Population == 1 & FW_Criterion == 1) %>% drop_na() #Only edge pop birds
table(core_oversight$ID, core_oversight$FW_Criterion, core_oversight$Actual_pass_diff) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
core_oversight
View(core_oversight)
table(core_oversight$ID, core_oversight$Actual_pass_diff, core_oversight$Phase) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
core_oversight <- dat %>% filter(Population == 1 & FW_Criterion == 1) %>% drop_na() #Only edge pop birds
table(core_oversight$ID, core_oversight$Actual_pass_diff, core_oversight$Phase) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
core_oversight
#Fixed-window Criterion
dat$FW_Criterion <- NA #0 = not passed; 1 = passing trial; 2 = extra learning trials, either in initial or reversal
for(i in 1:nrow(dat)){
dat$FW_Criterion[i] <- 0
if(dat$Trial[i] >= 20 & dat$Trial[i]%%10 == 0){
if(sum(dat$Correct[(i - 19):i]) >= 17){
if((sum(dat$Correct[(i - 19):(i - 10)]) >= 8) & (sum(dat$Correct[(i - 9):i]) >= 8)){
dat$FW_Criterion[i] <- 1
}
}
}
}
View(dat)
#, Batido in phase 2
core_oversight <- dat %>% filter(Population == 1 & FW_Criterion == 1) %>% drop_na() #Only edge pop birds
table(core_oversight$ID, core_oversight$Actual_pass_diff, core_oversight$Phase) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
middle_oversight <- dat %>% filter(Population == 2 & FW_Criterion == 1)  %>% drop_na() #Only edge pop birds
table(middle_oversight$ID, middle_oversight$Actual_pass_diff, middle_oversight$Phase) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
table(core_oversight$ID, core_oversight$FW_Criterion, core_oversight$Phase) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
View(dat)
#, Batido in phase 2
core_oversight <- dat %>% filter(Population == 1 & FW_Criterion == 1) %>% drop_na() #Only edge pop birds
table(core_oversight$ID, core_oversight$FW_Criterion, core_oversight$Phase) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
#, Batido in phase 2
core_oversight <- dat %>% filter(Population == 1 & FW_Criterion == 2) %>% drop_na() #Only edge pop birds
#, Batido in phase 2
core_oversight <- dat %>% filter(Population == 2 & FW_Criterion == 1) %>% drop_na() #Only edge pop birds
table(core_oversight$ID, core_oversight$FW_Criterion, core_oversight$Phase) #Returns 11 in initial (range: 1 - 10), 7 in reversal (range: 1 - 14)
